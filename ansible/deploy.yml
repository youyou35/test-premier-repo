#################################################################################################################################################
#paramètres du playbook:
#  project_name: nom du répetoire racine du projet - défaut: unknown-project
#  project_path: path du répertoire racine du projet - défaut: /home/integration
#  target_env:  INT/PROD/etc ... utilisé pour le lien symbolique de conf - défaut: none
#  git_repository_url: url du repo git - défaut: none
#  git_branch:  nom de la branche git - défaut: master
#  git_tag_name: nom du tag git - défaut: none - Optionnel


#tags:
    # last_commit       : checkout du dernier commit de la branche
    # latest_tag        : checkout du dernier tag
    # git_tag           : checkout du tag {{git_tag_name}}
    # post_conf         : gestion du/des fichiers de conf

# exemple:  Pull le dernier commit et modifie le fichier de configuration
#           ansible-playbook deploy.yml --extra-vars "target_env=PROD project_name=une_api" --tags "last_commit,pos_conf"

# validation: lance le playbook sur tous les tags:
#           ansible-playbook deploy.yml --extra-vars "target_env=INT project_name=api-pj git_tag_name=v1.0.0" -v --tags "post_conf,last_commit"
#################################################################################################################################################

#TODO: 
#       - gestion de la conf plus poussée... fichier de conf à nom fixe ? recherche de préfixe ? templates ? copy ?
#       - créer le tag <run> de lancement de l'api node

---
- hosts: ioda
  remote_user: integration

  vars:
   # configuration_files:
   #  general_conf:
   #    src_dir: api-rubriques-metier/src/main/resources/conf/
   #    src_name: conf.json
   #  routes_conf:
   #    src_dir: api-rubriques-metier/src/main/resources/conf/
   #    src_name: routes.json


   target_env: none
   project_name: unknown-project
   project_path: /home/integration
   git_repository_url: https://github.com/youyou35/test-premier-repo.git
   git_branch: master
   git_tag_name: none

  tasks:
   # - fail: msg="Echec, ce playbook nécessite la définition du paramètre suivant [tag_version]"
   #   when: tag_version is undefined

   #git pull forcé sur la branche
   - name: Git pull (forcé)
     git: 
      repo="{{git_repository_url}}"
      dest="{{project_path}}/{{project_name}}"
      version="{{git_branch}}"
      force=yes
     tags:
      last_commit

   - name: get new tags from remote
     shell: "git fetch --tags"
     args:
       chdir: "{{project_path}}/{{project_name}}"
     tags:
      last_tag

   - name: get latest tag name
     shell: "git describe --tags `git rev-list --tags --max-count=1`"
     args:
       chdir: "{{project_path}}/{{project_name}}"
     register: latest_tag
     tags:
      last_tag

   - name: checkout du dernier tag
     git:
      repo="{{git_repository_url}}"
      dest="{{project_path}}/{{project_name}}"
      version="{{latest_tag.stdout}}"
      force=yes
     tags:
      last_tag

   - name: checkout du tag cible
     git:
      repo="{{git_repository_url}}"
      dest="{{project_path}}/{{project_name}}"
      version="{{git_tag_name}}"
      force=yes
     tags:
      git_tag

   #Dans tous les cas on gère la post-conf
   # - name: Liste tous les fichiers de conf du projet lié à l'environnement cible
   #   find:
   #    paths="{{project_path}}/{{project_name}}"
   #    pattern="{{target_env}}.*"
   #    file_type=file
   #    recurse=yes
   #   tags:
   #    post_conf

   # - name: TESTS Liens symboliques complexes
   #   file: state=link 
   #    src="{{target_env}}.conf.json"
   #    dest="{{project_path}}/{{project_name}}/{{item.src_dir}}{{item.src_name}}"
   #    force=yes
   #   with_items:
   #    - { src_dir: 'api-rubriques-metier/src/main/resources/conf/', src_name: 'conf.json' }
   #    - { src_dir: 'api-rubriques-metier/src/main/resources/conf/', src_name: 'routes.json' }
   #   tags:
   #    post_conf

   - name: import des fichiers à configurer
     include_vars: "{{item}}"
     with_first_found:
      - deploiement_params.yml
     tags:
      post_conf

   - name: List conf files
     debug: 
      msg="User {{ item.key }} is {{ item.value.src_dir }} ({{ item.value.src_name }})"
     with_dict: "{{configuration_files}}"
     tags:
      debug

   - name: Création des liens symboliques décrits dans ansible/deploiement_params.yml
     file: state=link 
      src="{{target_env}}.{{item.value.src_name}}"
      dest="{{project_path}}/{{project_name}}/{{item.value.src_dir}}{{item.value.src_name}}"
      force=yes
     with_dict: "{{configuration_files}}"
     tags:
      post_conf
  
  #buld additionnel
   # - name: Install dépendances
   #   npm:

  #run pm2 par exemple 