#################################################################################################################################################
#paramètres du playbook:
#  project_name: nom du répetoire racine du projet - défaut: unknown-project
#  target_env:  INT/PROD/etc ... utilisé pour le lien symbolique de conf - défaut: none
#  project_path: path du répertoire racine du projet - défaut: /home/integration - Optionnel
#
#  git_url: url du repo git - défaut: none
#  git_branch:  nom de la branche git - défaut: master - Optionnel
#  git_revision: nom de la source revision (tag ou commit) - défaut: none - Optionnel


#tags:
    # git_pull          : checkout du dernier commit de la branche
    # latest_tag        : checkout du dernier tag
    # git_checkout      : checkout de la revision {{git_revision}}
    # post_conf         : gestion du/des fichiers de conf

# exemple:  Pull le dernier commit et modifie le fichier de configuration
#           ansible-playbook deploy.yml --extra-vars "target_env=PROD project_name=une_api git_url=https://github.com/youyou35/test-premier-repo.git" --tags "git_pull,pos_conf"

# validation: lance le playbook sur tous les tags:
#           ansible-playbook deploy.yml --extra-vars "target_env=INT project_name=api-pj git_url=https://github.com/youyou35/test-premier-repo.git git_commit=v2.0"
#################################################################################################################################################


---
- hosts: jenkins
  remote_user: jenkins

  vars:
   target_env: none
   project_name: unknown-project
   project_path: /home/integration
   git_url: none
   git_branch: master
   git_revision: none

  tasks:
   # - fail: msg="Echec, ce playbook nécessite la définition du paramètre suivant [tag_version]"
   #   when: tag_version is undefined

   ####  usages de GIT ###
   ### Par commit ###
   - name: Git pull (forcé)
     git: 
      repo="{{git_url}}"
      dest="{{project_path}}/{{project_name}}"
      version="{{git_branch}}"
      force=yes
     tags:
      git_pull

   ### Pour un tag, c'est la même chose car Jenkins fournit toujours une revision value ###
   - name: checkout de la révision cible
     git:
      repo="{{git_url}}"
      dest="{{project_path}}/{{project_name}}"
      version="{{git_revision}}"
      force=yes
     tags:
      git_checkout
   
   ### Dernier tag -- bof bof à oublier je pense ###
   - name: get new tags from remote
     shell: "git fetch --tags"
     args:
       chdir: "{{project_path}}/{{project_name}}"
     tags:
      last_tag

   - name: get latest tag name
     shell: "git describe --tags `git rev-list --tags --max-count=1`"
     args:
       chdir: "{{project_path}}/{{project_name}}"
     register: latest_tag
     tags:
      last_tag

   - name: checkout du dernier tag
     git:
      repo="{{git_url}}"
      dest="{{project_path}}/{{project_name}}"
      version="{{latest_tag.stdout}}"
      force=yes
     tags:
      last_tag

   ### POST CONFIGURATION ###
   
   # TODO ? : découvrir les fichiers de conf par filtrages sur noms de fichiers dans le projet et lien symbolique dans la foulée
   #          Très axé conventions, pratique mais moins évident qu'une déclaration explicite en bonne et due forme.
   #          De toutes façons c'est ansible > 2.0 donc pas encore mûr pour exploitation (pas encore sorti en stable)
   # - name: Liste tous les fichiers de conf du projet lié à l'environnement cible
   #   find:
   #    paths="{{project_path}}/{{project_name}}"
   #    pattern="{{target_env}}.*"
   #    file_type=file
   #    recurse=yes
   #   tags:
   #    post_conf

   # On charge le fichier yaml qui décrit ce qu'il faut post-configurer
   - name: Liste des fichiers à configurer
     include_vars: "{{item}}"
     with_first_found:
      - deploiement_params.yml
     tags:
      post_conf

   - name: Création des liens symboliques décrits dans ansible/deploiement_params.yml
     file: state=link 
      src="{{target_env}}.{{item.value.src_name}}"
      dest="{{project_path}}/{{item.value.src_dir}}{{item.value.src_name}}"
      force=yes
     with_dict: "{{configuration_files}}"
     tags:
      post_conf
  
  #### BUILD ####
  # gestion de npm (tag nodejs)
  # gestion de bower (tag angular)
  # gestion de ??? (tag flask - python ...)
  
  #### RUN ####
  # gestion de pm2 (tag nodejs)
  # gestion de flask ... (tag flask) ==> la stack supervisord/gunicorn est actuellement en watch sur les sources mais bon.

  #### Smoke tests ####
  # un petit curl sur les apis ne ferait pas de mal ?